generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========== ENUMS ==========
enum Role {
  ADMIN
  TUTOR
  STUDENT
  HOMEROOM_TEACHER
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AssignmentType {
  MATERIAL
  EXERCISE
  QUIZ

  DAILY_TEST // Ujian Harian
  START_SEMESTER_TEST // Ujian Awal Semester

  MIDTERM
  FINAL_EXAM
}

enum SubmissionStatus {
  NOT_STARTED
  IN_PROGRESS
  SUBMITTED
  GRADED
  LATE
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
  MATCHING
}

enum StudentStatus {
  ACTIVE // Masih aktif belajar
  GRADUATED // Sudah lulus
  TRANSFERRED // Pindah sekolah
  DROPPED_OUT // Mengundurkan diri
  DECEASED // Meninggal dunia
}

enum TutorStatus {
  ACTIVE // Masih mengajar
  RESIGNED // Mengundurkan diri
  RETIRED // Pensiun
  DECEASED // Meninggal dunia
  ON_LEAVE // Cuti panjang
}

enum AttendanceStatus {
  PRESENT
  SICK
  EXCUSED
  ABSENT
}

// ========== MAIN MODELS ==========
model User {
  id          String    @id @default(dbgenerated("concat('usr_', gen_random_uuid())")) @db.VarChar(40)
  nama        String    @db.VarChar(100)
  email       String    @unique @db.VarChar(255)
  password    String
  role        Role
  status      Status?   @default(ACTIVE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?

  // Relations
  student Student?
  tutor   Tutor?

  // 🔽 Tambahan untuk fitur chat & diskusi
  chatRooms    ChatRoom[]    @relation("RoomUsers")
  sentMessages ChatMessage[] @relation("Sender") // semua pesan yg dikirim user

  DiscussionRoom    DiscussionRoom[]
  DiscussionMessage DiscussionMessage[]
  Log               Log[]

  sentNotifications     Notification[] @relation("SentNotifications")
  receivedNotifications Notification[] @relation("ReceivedNotifications")
  ChatRoom              ChatRoom[]

  // Index
  @@index([email])
  @@index([role])
  @@index([status])
}

model Student {
  id          String @id @default(dbgenerated("concat('std_', gen_random_uuid())")) @db.VarChar(40)
  userId      String @unique
  namaLengkap String @db.VarChar(100) // ✅ Tambahan

  user         User          @relation(fields: [userId], references: [id])
  nisn         String        @unique @db.VarChar(20)
  jenisKelamin Gender?
  tempatLahir  String?       @db.VarChar(50)
  tanggalLahir DateTime?
  alamat       String?       @db.Text
  fotoUrl      String?       @db.VarChar(255)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  status       StudentStatus @default(ACTIVE)
  noTelepon    String?       @db.VarChar(20)
  nis          String?       @db.VarChar(20) // Nomor Induk Siswa Nasional

  naikKelas    Boolean @default(false) // usulan dari homeroom untuk naik kelas
  diprosesNaik Boolean @default(false) // apakah sudah diproses oleh admin

  // Relations
  classId             String?
  class               Class?                @relation("StudentClass", fields: [classId], references: [id])
  submissions         Submission[]
  StudentClassHistory StudentClassHistory[]
  Attendance          Attendance[]
  SkillScore          SkillScore[]
  BehaviorScore       BehaviorScore[]
  FinalScore          FinalScore[]

  // Index
  @@index([nisn])
  @@index([classId])
}

model Tutor {
  id          String @id @default(dbgenerated("concat('ttr_', gen_random_uuid())")) @db.VarChar(40)
  userId      String @unique
  namaLengkap String @db.VarChar(100)

  user       User        @relation(fields: [userId], references: [id])
  bio        String?     @db.Text
  pendidikan String?     @db.Text
  pengalaman String?     @db.Text
  telepon    String?     @db.VarChar(20)
  fotoUrl    String?     @db.VarChar(255)
  status     TutorStatus @default(ACTIVE)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Relasi mengajar biasa
  classSubjectTutors ClassSubjectTutor[]

  // Relasi absensi sesi
  AttendanceSession AttendanceSession[]

  // Relasi sebagai wali kelas
  homeroomClasses Class[] @relation("HomeroomRelation")

  @@index([telepon])
}

// ========== ACADEMIC STRUCTURE ==========
model AcademicYear {
  id                  String                @id @default(dbgenerated("concat('acy_', gen_random_uuid())")) @db.VarChar(40)
  tahunMulai          Int
  tahunSelesai        Int
  isActive            Boolean               @default(false)
  classes             Class[]
  StudentClassHistory StudentClassHistory[]
  Attendance          Attendance[]
  AttendanceSession   AttendanceSession[]
  BehaviorScore       BehaviorScore[]
  FinalScore          FinalScore[]
  HolidayRange        HolidayRange[]

  // Validation
  @@unique([tahunMulai, tahunSelesai])
}

model Program {
  id             String           @id @default(dbgenerated("concat('prg_', gen_random_uuid())")) @db.VarChar(40)
  namaPaket      String           @db.VarChar(50)
  classes        Class[]
  ProgramSubject ProgramSubject[]

  // Index
  @@unique([namaPaket])
}

model Class {
  id             String @id @default(dbgenerated("concat('cls_', gen_random_uuid())")) @db.VarChar(40)
  namaKelas      String @db.VarChar(50)
  programId      String
  academicYearId String

  // 🔥 Tambahan untuk wali kelas
  homeroomTeacherId String?
  homeroomTeacher   Tutor?  @relation("HomeroomRelation", fields: [homeroomTeacherId], references: [id])

  // Normal Relations
  program             Program               @relation(fields: [programId], references: [id])
  academicYear        AcademicYear          @relation(fields: [academicYearId], references: [id])
  students            Student[]             @relation("StudentClass")
  classSubjectTutors  ClassSubjectTutor[]
  StudentClassHistory StudentClassHistory[]
  Attendance          Attendance[]
  AttendanceSession   AttendanceSession[]

  @@unique([namaKelas, programId, academicYearId])
}

model Subject {
  id        String  @id @default(dbgenerated("concat('sub_', gen_random_uuid())")) @db.VarChar(40)
  namaMapel String  @db.VarChar(100)
  kodeMapel String? @db.VarChar(20)
  deskripsi String? @db.Text

  // Relations
  classSubjectTutors ClassSubjectTutor[]
  ProgramSubject     ProgramSubject[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  SkillScore SkillScore[]
  FinalScore FinalScore[]

  // Index
  @@unique([namaMapel])
  @@index([kodeMapel])
}

model ProgramSubject {
  id        String @id @default(dbgenerated("concat('psj_', gen_random_uuid())")) @db.VarChar(40)
  programId String
  subjectId String

  program Program @relation(fields: [programId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([programId, subjectId])
}

// ========== LEARNING SYSTEM ==========
model ClassSubjectTutor {
  id        String @id @default(dbgenerated("concat('cst_', gen_random_uuid())")) @db.VarChar(40)
  tutorId   String
  classId   String
  subjectId String

  // Relations
  tutor   Tutor   @relation(fields: [tutorId], references: [id])
  class   Class   @relation(fields: [classId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])

  learningMaterials LearningMaterial[]
  assignments       Assignment[]
  quizzes           Quiz[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  DiscussionRoom DiscussionRoom[]
  ChatRoom       ChatRoom[]

  @@unique([tutorId, classId, subjectId])
}

model LearningMaterial {
  id                  String                @id @default(dbgenerated("concat('mat_', gen_random_uuid())")) @db.VarChar(40)
  judul               String                @db.VarChar(200)
  pertemuan           String?               @default("1") @db.VarChar(10) // Untuk materi pertemuan tertentu
  konten              String                @db.Text
  fileUrl             String?               @db.VarChar(255)
  tipeMateri          LearningMaterialType? @default(FILE)
  classSubjectTutorId String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt

  classSubjectTutor ClassSubjectTutor @relation(fields: [classSubjectTutorId], references: [id])
}

model Assignment {
  id                  String         @id @default(dbgenerated("concat('asn_', gen_random_uuid())")) @db.VarChar(40)
  judul               String         @db.VarChar(200)
  deskripsi           String?        @db.Text
  jenis               AssignmentType
  classSubjectTutorId String
  waktuMulai          DateTime
  waktuSelesai        DateTime
  batasWaktuMenit     Int?
  nilaiMaksimal       Int?
  questionsFromPdf    String?        @db.Text // Store base64 PDF
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  classSubjectTutor ClassSubjectTutor @relation(fields: [classSubjectTutorId], references: [id])
  questions         Question[]
  submissions       Submission[]
}

model Quiz {
  id                  String   @id @default(dbgenerated("concat('qz_', gen_random_uuid())")) @db.VarChar(40)
  judul               String   @db.VarChar(200)
  deskripsi           String?  @db.Text
  classSubjectTutorId String
  waktuMulai          DateTime
  waktuSelesai        DateTime
  durasiMenit         Int
  nilaiMaksimal       Int
  acakSoal            Boolean  @default(false)
  acakJawaban         Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  classSubjectTutor ClassSubjectTutor @relation(fields: [classSubjectTutorId], references: [id])
  questions         Question[]
  submissions       Submission[]
}

model Question {
  id           String         @id @default(dbgenerated("concat('qst_', gen_random_uuid())")) @db.VarChar(40)
  assignmentId String?
  quizId       String?
  teks         String         @db.Text
  jenis        QuestionType
  poin         Int            @default(1)
  options      AnswerOption[]
  jawabanBenar String? // For auto-grading (could be JSON for multiple answers)
  pembahasan   String?        @db.Text

  assignment Assignment? @relation(fields: [assignmentId], references: [id])
  quiz       Quiz?       @relation(fields: [quizId], references: [id])
  answers    Answer[]
}

model AnswerOption {
  id         String  @id @default(dbgenerated("concat('opt_', gen_random_uuid())")) @db.VarChar(40)
  questionId String
  teks       String  @db.VarChar(500)
  kode       String? // ✅ Tambahan field kode

  adalahBenar Boolean @default(false)

  question Question @relation(fields: [questionId], references: [id])
}

model Submission {
  id           String           @id @default(dbgenerated("concat('sbm_', gen_random_uuid())")) @db.VarChar(40)
  studentId    String
  assignmentId String? // UTK UTS DAN UAS
  quizId       String? // UTK QUIZ SAJA
  status       SubmissionStatus @default(NOT_STARTED)
  waktuMulai   DateTime?
  waktuKumpul  DateTime?
  nilai        Float?
  waktuDinilai DateTime?
  feedback     String?          @db.Text
  answerPdf    String?          @db.Text // Store base64 PDF for assignment answers
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  student    Student     @relation(fields: [studentId], references: [id])
  assignment Assignment? @relation(fields: [assignmentId], references: [id])
  quiz       Quiz?       @relation(fields: [quizId], references: [id])
  answers    Answer[]
}

model Answer {
  id           String   @id @default(dbgenerated("concat('ans_', gen_random_uuid())")) @db.VarChar(40)
  submissionId String
  questionId   String
  jawaban      String   @db.Text // Could be JSON for complex answers
  adalahBenar  Boolean?
  feedback     String?  @db.VarChar(500)
  nilai        Float?

  submission Submission @relation(fields: [submissionId], references: [id])
  question   Question   @relation(fields: [questionId], references: [id])
}

model DiscussionRoom {
  id                  String   @id @default(dbgenerated("concat('dsr_', gen_random_uuid())")) @db.VarChar(40)
  classSubjectTutorId String
  judul               String   @db.VarChar(200)
  deskripsi           String?  @db.Text
  createdById         String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  classSubjectTutor ClassSubjectTutor   @relation(fields: [classSubjectTutorId], references: [id])
  createdBy         User                @relation(fields: [createdById], references: [id])
  messages          DiscussionMessage[]

  @@index([classSubjectTutorId])
}

model DiscussionMessage {
  id        String   @id @default(dbgenerated("concat('dsm_', gen_random_uuid())")) @db.VarChar(40)
  roomId    String
  senderId  String
  isiPesan  String   @db.Text
  sentAt    DateTime @default(now())
  updatedAt DateTime @updatedAt

  room   DiscussionRoom @relation(fields: [roomId], references: [id])
  sender User           @relation(fields: [senderId], references: [id])

  @@index([roomId])
  @@index([senderId])
}

model Attendance {
  id             String           @id @default(dbgenerated("concat('att_', gen_random_uuid())")) @db.VarChar(40)
  studentId      String
  classId        String
  academicYearId String
  date           DateTime
  status         AttendanceStatus
  createdAt      DateTime         @default(now())

  student             Student            @relation(fields: [studentId], references: [id])
  class               Class              @relation(fields: [classId], references: [id])
  academicYear        AcademicYear       @relation(fields: [academicYearId], references: [id])
  AttendanceSession   AttendanceSession? @relation(fields: [attendanceSessionId], references: [id])
  attendanceSessionId String?            @db.VarChar(40)

  @@index([studentId])
  @@index([classId])
}

model AttendanceSession {
  id             String   @id @default(dbgenerated("concat('ats_', gen_random_uuid())")) @db.VarChar(40)
  tutorId        String
  classId        String
  academicYearId String // ❗ Terkait Tahun Ajaran
  tanggal        DateTime
  keterangan     String?  @db.VarChar(255)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  tutor        Tutor        @relation(fields: [tutorId], references: [id])
  class        Class        @relation(fields: [classId], references: [id])
  academicYear AcademicYear @relation(fields: [academicYearId], references: [id])
  attendances  Attendance[]

  @@index([academicYearId])
}

model SkillScore {
  id         String   @id @default(dbgenerated("concat('skl_', gen_random_uuid())")) @db.VarChar(40)
  studentId  String
  subjectId  String
  nilai      Float
  keterangan String? // contoh: "Praktik Membuat Puisi", "Praktik Percobaan Kimia", dll
  createdAt  DateTime @default(now())

  student Student @relation(fields: [studentId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])

  @@unique([studentId, subjectId]) // ❗ 1 mapel, 1 nilai praktek per siswa
}

model BehaviorScore {
  id             String   @id @default(dbgenerated("concat('bhs_', gen_random_uuid())")) @db.VarChar(40)
  studentId      String
  academicYearId String
  spiritual      Float
  sosial         Float
  kehadiran      Float // presentase atau skor berdasarkan absensi
  catatan        String? // opsional, misal "Sikap sangat baik", "Perlu perbaikan kehadiran"
  createdAt      DateTime @default(now())

  student      Student      @relation(fields: [studentId], references: [id])
  academicYear AcademicYear @relation(fields: [academicYearId], references: [id])

  @@unique([studentId, academicYearId]) // ❗ 1 tahun ajaran, 1 nilai behavior
}

model StudentClassHistory {
  id             String @id @default(dbgenerated("concat('sch_', gen_random_uuid())")) @db.VarChar(40)
  studentId      String
  classId        String
  academicYearId String

  student      Student      @relation(fields: [studentId], references: [id])
  class        Class        @relation(fields: [classId], references: [id])
  academicYear AcademicYear @relation(fields: [academicYearId], references: [id])

  naikKelas  Boolean @default(false) // apakah naik kelas
  nilaiAkhir Float? // total rata-rata nilai

  createdAt DateTime @default(now())
}

model Log {
  id        String   @id @default(uuid())
  userId    String
  action    String
  timestamp DateTime @default(now())
  metadata  Json?
  user      User     @relation(fields: [userId], references: [id])
}

model FinalScore {
  id            String   @id @default(dbgenerated("concat('fns_', gen_random_uuid())")) @db.VarChar(40)
  studentId     String
  subjectId     String
  nilaiAkhir    Float
  tahunAjaranId String
  createdAt     DateTime @default(now())

  student      Student      @relation(fields: [studentId], references: [id])
  subject      Subject      @relation(fields: [subjectId], references: [id])
  academicYear AcademicYear @relation(fields: [tahunAjaranId], references: [id])

  @@unique([studentId, subjectId, tahunAjaranId]) // satu nilai akhir per mapel per tahun ajaran
}

model HolidayRange {
  id             String   @id @default(dbgenerated("concat('hlr_', gen_random_uuid())")) @db.VarChar(40)
  nama           String
  startDate      DateTime
  endDate        DateTime
  academicYearId String?

  academicYear AcademicYear? @relation(fields: [academicYearId], references: [id])

  @@index([startDate, endDate])
}

model Holiday {
  id        String   @id @default(dbgenerated("concat('hld_', gen_random_uuid())")) @db.VarChar(40)
  tanggal   DateTime @unique
  reason    String   @db.VarChar(255)
  createdAt DateTime @default(now())
}

model Notification {
  id         String   @id @default(dbgenerated("concat('ntf_', gen_random_uuid())")) @db.VarChar(40)
  senderId   String // pengirim (User.id)
  receiverId String // penerima (User.id)
  title      String
  message    String
  type       String // optional: 'GENERAL', 'TASK', 'ATTENDANCE', etc
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  sender   User @relation("SentNotifications", fields: [senderId], references: [id])
  receiver User @relation("ReceivedNotifications", fields: [receiverId], references: [id])
}

model ChatRoom {
  id        String        @id @default(dbgenerated("concat('crm_', gen_random_uuid())")) @db.VarChar(40)
  name      String?
  type      ChatRoomType  @default(PRIVATE) // PRIVATE, GROUP, FORUM
  users     User[]        @relation("RoomUsers") // ✅ BENAR
  messages  ChatMessage[]
  createdAt DateTime      @default(now())

  createdById String?
  createdBy   User?   @relation(fields: [createdById], references: [id])

  classSubjectTutorId String? // ← Tambahkan ini
  classSubjectTutor   ClassSubjectTutor? @relation(fields: [classSubjectTutorId], references: [id])

  pinned Boolean @default(false)
  closed Boolean @default(false)
}

model ChatMessage {
  id        String   @id @default(dbgenerated("concat('msg_', gen_random_uuid())")) @db.VarChar(40)
  senderId  String
  roomId    String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  sender User     @relation("Sender", fields: [senderId], references: [id])
  room   ChatRoom @relation(fields: [roomId], references: [id])
}

enum ChatRoomType {
  PRIVATE
  GROUP
  FORUM
}

enum LearningMaterialType {
  LINK_YOUTUBE
  FILE
}
